package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å .env —Ñ–∞–π–ª", err)
	}

	fmt.Print("weather_cli | –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥: ")

	reader := bufio.NewReader(os.Stdin)
	city, err := reader.ReadString('\n')
	if err != nil {
		log.Fatal("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–≤–æ–¥–∞:", err)
	}
	escapedCity := url.QueryEscape(city)

	API_KEY := os.Getenv("API_WEATHER")
	apiUrl := fmt.Sprintf("https://api.weatherapi.com/v1/current.json?key=%s&q=%s&aqi=no", API_KEY, escapedCity)

	resp, err := http.Get(apiUrl)
	if err != nil {
		log.Fatal("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ:", err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Response Body", err)
	}

	var weather WeatherResponse
	err = json.Unmarshal(body, &weather)
	if err != nil {
		log.Fatalf("‚ö† –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %v", err, string(body))
	}

	fmt.Printf("üåç –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å –≤ %v, %v\n\n", weather.Location.Name, weather.Location.Country)
	fmt.Printf("üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %v¬∞C\n", weather.Current.TempC)
	fmt.Printf("ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: %v¬∞C\n", weather.Current.FeelslikeC)
	fmt.Printf("üí® –í–µ—Ç–µ—Ä: %v –∫–º/—á\n", weather.Current.WindKPH)
}

type WeatherResponse struct {
	Location struct {
		Name    string `json:"name"`
		Country string `json:"country"`
	} `json:"location"`
	Current struct {
		TempC      float64 `json:"temp_c"`
		FeelslikeC float64 `json:"feelslike_c"`
		WindKPH    float64 `json:"wind_kph"`
	} `json:"current"`
}
