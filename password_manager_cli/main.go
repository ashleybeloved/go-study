package main

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"strings"
)

// map - —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π (name:pass)
var passwordDatabase = map[string]string{}

func main() {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Println("[1] üîë –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
		fmt.Println("[2] üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–∞—Ä–æ–ª–∏")
		fmt.Println("[3] üö™ –í—ã—Ö–æ–¥")
		fmt.Print("\npassword_manager_cli | –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ")

		choose := readInt(reader)

		switch choose {
		case 1:
			passwordCreate(reader)
		case 2:
			passwordList()
		case 3:
			bye()
		default:
			fmt.Print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n")
		}
	}
}

func passwordCreate(reader *bufio.Reader) {
	fmt.Println("\n[1] üõ† –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å –≤—Ä—É—á–Ω—É—é")
	fmt.Println("[2] üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å")
	fmt.Println("[3] üîô –ù–∞–∑–∞–¥")
	fmt.Print("\npassword_manager_cli | –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ")

	choose := readInt(reader)

	switch choose {
	case 1:
		fmt.Print("\n‚úè –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
		passwordNew := readLine(reader)

		fmt.Print("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–ª—è —á–µ–≥–æ –æ–Ω): ")
		passwordName := readLine(reader)

		passwordDatabase[passwordName] = passwordNew
		fmt.Println("\n‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
	case 2:
		fmt.Print("\nüìè –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: ")
		length := readInt(reader)
		if length <= 0 {
			fmt.Println("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
			return
		}

		passwordNew := generatePassword(length)

		fmt.Printf("\nüéØ –í–æ—Ç –≤–∞—à –ø–∞—Ä–æ–ª—å, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ: %v\n", passwordNew)

		fmt.Print("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–ª—è —á–µ–≥–æ –æ–Ω): ")
		passwordName := readLine(reader)

		passwordDatabase[passwordName] = passwordNew
		fmt.Println("\n‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
	case 3:
		return
	default:
		fmt.Println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
	}
}

func passwordList() {
	fmt.Print("\nüìú –í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π: \n\n")

	if len(passwordDatabase) == 0 {
		fmt.Print("üìÇ –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–æ–ª–µ–π –ø—É—Å—Ç.\n\n")
		return
	}

	for passwordName, password := range passwordDatabase { // –ø–µ—Ä–µ–±–æ—Ä –ø–æ key:value
		fmt.Printf("üîπ %v: %v\n", passwordName, password)
	}
	fmt.Println()
}

func generatePassword(length int) string {
	chars := "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{}<>?"
	password := make([]byte, length) // —Å–æ–∑–¥–∞–Ω–∏–µ –°–†–ï–ó–ê –±–∞–π—Ç–æ–≤ –¥–ª–∏–Ω–æ–π length (1 —Å–∏–º–≤–æ–ª - 1 –±–∞–π—Ç)
	for i := range password {
		password[i] = chars[rand.Intn(len(chars))] // –ø–µ—Ä–µ–±–æ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å—Ä–µ–∑–∞
	}
	return string(password)
}

func bye() {
	fmt.Println("\nüëã –í—ã—Ö–æ–¥...")
	os.Exit(0)
}

func readLine(reader *bufio.Reader) string {
	line, _ := reader.ReadString('\n')
	return strings.TrimSpace(line)
}

func readInt(reader *bufio.Reader) int {
	line := readLine(reader)
	var num int
	fmt.Sscanf(line, "%d", &num)
	return num
}
